/ ** CREATE BACKEND ** /
- Figure out how to handle different types of errors with main error middleware.


- Create config (20 min - 30m) √ -- 15m to complete
    • ports (10m -15m)
    • databases (10m - 15m)

- Account for strings or objects in main app middleware (20 min - 25 min) √ -- 30m to complete
    
- Finish API for users (1 hr - 2 hr) √ -- 2.5hrs to complete
    • create PUT endpoint (45 min - 1 hr)
        * Validate request (?) (10 min - 15 min)
          - write mongoose code (20 min - 30 min)
          - write validate helper (5 min - 15 min)
          - write exception classes (1 min - 5 min)
          etc
        
    • create DELETE endpoint (20 min - 30 min)
          - write mongoose code (10 min - 15 min)
          - write validate helper - N/A
          - write exception classes (1 min - 5 min) 
    
TASK 
- Create API for recipes (2.5 hrs - 3.5 hrs) -- currently 1.5 hrs  
    • Create /recipes folder with recipeCtrl, recipeModel, and recipeRoutes. (1 min - 5 min) 
    • Create recipes model. (30 min - 40 min) 
        * Fields:
            - recipe title (String)
            - ingredients (Array of Strings)
            - directions - (Array of Strings)
            - description - (String)
    
    • Create recipes ctrl. (1 hr - 2 hr)
        - Use user ctrl as a reference (15 min - 20 min)
        - Write validate helpers - (15 min - 30 min)
     
     • Create recipes route. (5 min - 15 min)
        - Create recipe routes with controller functions (5 min - 15 min)
    
    • Implement error handlers
        - model hooks?
        - route level?
    
   • Add recipe router to api.js. (1 min - 2 min)
  
   TASK 
   - Create login route and controller (2h - 4h)
        • make a public login route (10m - 20m)
        • implement user session (express globals)
        • check if password and email match
        • test
   
   TASK
   - Create local authentication strategy for login with passport.js
        • Read documentation, tutorials on passport.js.
        • Set up passport.js.
            - do this first
            - then this
            - finally this
        • implement strategy on login route
        • test
  
   
   
  - Create error handlers
    
    - Add any API helpers - validating new recipe has all fields. XXXX
    
- Error/validation messages for user to see on front end.
    - Express sessions, possible npm modules?


/ ** CREATE FRONTEND ** /

- Create pug files to render html on server.
    - Research pug and how to create reusable components so you're not repeating yourself. 
    - Use bootstrap to create components/pages:
        - Nav
        - User register
        - User login
        - All recipes page
        - Edit recipe
        - Add recipe
- Possibly add client JavaScript validation for user forms and recipes



